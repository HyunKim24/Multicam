# 단일 데이터 > 문자열(엄밀히 따지면 시퀀스타입에 속한다.)
# 표시 방법
# '', "", '''...''', """...""" 4가지로 정의 가능
# '', "" 
# => 한줄 문자열, 2개가 존재하는 것은 섞어 사용 가능
# '''...''', """...""" 
# => 주석용, 여러줄 표현(구조를 유지)
############################################################################
a = 'hi'
print(a)
a = "hello"
print(a)
# 2개의 표현을 혼용해서 사용
a = "i'm a programmer"
print(a)
a = 'i"m" a programmer'
print(a)
# \알파벳 => 이스케이프 문자
a = 'i\'m a programmer'
print(a)
############################################################################
# 여러줄 표현
a = '''
손흥민의 움직임 덕분에 토트넘은 공격에 더 많은 힘을 실을 수 있었다. 손흥민이 있던 공간에는 대니 로즈가 들어왔다. 윙어처럼 움직였다. 공격진에 한 명이 더 들어와있는 것과 마찬가지였다. 

후반 손흥민은 윙어로 자리를 바꿨다. 초반에는 본머스의 측면을 공략했다. 손흥민의 역할은 루카스 모우라가 수행했다. 중반에 접어들며 다시 최전방으로 올라갔다. 후반 25분 두번째 골은 적극성과 집중력 덕분이었다. 토트넘 선수들이 여러차례 슈팅했다. 베고비치 골키퍼가 계속 막아냈다. 이를 손흥민이 낚아챘다. 그리고 골을 만들었다. 

후반 32분 케인이 나가고 라멜라가 들어오자 손흥민은 원톱으로 나섰다. 승부의 추가 기운 상태였지만 손흥민은 열심히 뛰었다. 후반 43분. 윙어이자 투톱, 그리고 원톱을 소화한 '멀티 공격수' 손흥민이 교체아웃됐다. 4만5000여 웸블리 관중들은 기립박수를 보냈다. 에이스를 위한 박수였다. 

'''
print(a)
# 주석용
'''
ㅇ
ㅇ
ㅇ
ㅇ
'''
############################################################################
# 문자열 연산
# 문자열 더하기
a = 'abc'
b = '567'
#문자를 합친다.(이어 붙일대 간단하게 사용)
print(a+b)
# 문자열 반복
print( '#'*100)
############################################################################
# indexing: 인덱싱
a = '0123456789'
# 인덱싱은 문자열에서 특정 문자를 획득하는 방식
# 시퀀스 타입에서 특정 데이터를 획득하는 방법
# 값을 획득하는 작업이다 보니 => 차원축소 의미를 가진다.
# 1을 출력하시오
# 문법 : 변수명[인덱스(순서가 존재한다)]
# 정방향
# 인덱스는 0부터 시작
print(a[1])
# 역방향
print(a[-9])
# 인덱싱의 값은 가까운 쪽에서 계산한다.
############################################################################
# 슬라이싱 -> 자르기 -> 범위
# 문법 : 번수명[시작인덱스:끝인덱스:step(기본값이 1 생략하면 1)]
a = '0123456789'
# 1~8까지 출력하시오
print(a[1:-1]) 
print(a[1:-1:2]) 
# 0~3까지 출력하시오
print(a[0:4])
print(a[:4])
# 7~9까지 출력
print(a[-3:])
# 카피 -> 사본 생성
print(a[:])

path = "http://google.com/img/a.png"
#파일명을 출력하시오
print(path[-5:])
############################################################################
# 포맷팅
# 데이터를 문자열에 세팅하여 표현을 하는 방법
x = 1
y = 2
z = x+y
# x +y = z이라는 문자열을 출력하시오
# x ,y ,z에는 값이 온다.
# 정수값을 일일이 문자열로 변환(str())하여서 더했다.
print(str(x)+" + "+str(y)+" = "+str(x+y))
# 기본 포멧팅으로 처리
print('%d + %d = %d' %(x,y,x+y))
print('%d / %d = %f' %(x,y,x/y))
# %s를 사용하면 타입 신경 안써도 알아서 데이터를 맞춰준다.
print('%s / %s = %s' %(x,y,x/y))
############################################################################
# 문자열에서 지원하는 함수(객체에서 지원하는 함수=> 유니버스 함수)
c = '{0} / {1} = {2}'.format(x,y,x/y)
print(c)
# 사용할때 순서대로 사용하지 않아도 된다.
c = '{0} / {2} = {1}'.format(x,y,x/y)
print(c)
# 파라미터(인자명)을 지정하여 표멧팅에 사용가능
# 값에 대한 명확성을 좀더 부여 할 수 있다.
c = '{0} / {1} = {result}'.format(x,y,result = x/y)
print(c)
############################################################################
# 문자열 지원함수(멤버함수, 유니버스함수)
a = '0123456789'
print('문자열 내부의 특정 문자가 몇개인가?',a.count('1'))
print('문자열 내부의 특정 문자가 몇개인가?',a.count('a'))
print('문자열 내부의 특정 문자열 몇개인가?',a.count('123'))
# 문자열 내에 특정 문자(열)이 존재하는지 체크 할 수 있다.
# 빈도를 체크 => 분석 및 의미를 추출해 낼 수 있다.
# 조인 join
b = ','
print(b.join(a))
# 분해 split
c = b.join(a)
print(c.split(b))
# path를 분해
print(path.split('/')[-1])
############################################################################
# 공백제거
# 왼쪽, 오른쪽, 양쪽공백
a = '     sdfsss   ddddfsdf     '
# 내부공백(기본함수x, 정규식으로만 해결)
print('[%s]' %a.lstrip())
print('[%s]' %a.rstrip())
print('[%s]' %a.strip())
############################################################################
# 대소문자 처리
# 일괄적으로 대문자 혹은 소문자로 변경하여 처리
a = 'abcDEF123!@#가나다'
print(a.lower())
print(a.upper())
############################################################################
# 포멧팅에서 자리(칸) 표현
print( '[%s]' % '12345' )
# [여기 자리수가 10개였다.]
print( '[%10s]' % '12345' )
print( '[%-10s]' % '12345' )
# 부동소수, 실수부
print( '[%f]' % 3.1456798)
# 소수부를 자리를 짜를때, 반올림 증상이 있다.
print( '[%0.2f]' % 3.1456798)
print( '[%10.2f]' % 3.1456798)
############################################################################
# 치환식
a = '123{0}456'.format('k')
print(a)
# 칸을 10개로 두고 앞에서부터 문자를 채운다.
a = '123{0:<10}456'.format('k')
print(a)
# 123k         456
# 칸을 10개로 두고 뒤에서부터 문자를 채운다.
a = '123{0:>10}456'.format('k')
print(a)
# 123         k456
# 칸을 10개로 두고 중간에서 문자를 채운다.
a = '123{0:^10}456'.format('k')
print(a)
# 123    k     456
# 빈칸을 특정문자로 채우기
a = '123{0:*^10}456'.format('k')
print(a)
# 123****k*****456